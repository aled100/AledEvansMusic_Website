---
import Base from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import site from '../content/site.json';

// Normalize any YouTube URL to an embeddable form
const toEmbed = (raw) => {
  try {
    const u = new URL(raw);
    let id = '';

    if (u.hostname.includes('youtu.be')) {
      id = u.pathname.replace('/', '');
    } else if (u.hostname.includes('youtube.com')) {
      if (u.pathname.startsWith('/shorts/')) {
        id = u.pathname.split('/')[2] || u.pathname.split('/')[1];
      } else if (u.searchParams.get('v')) {
        id = u.searchParams.get('v');
      }
    }
    return id ? `https://www.youtube.com/embed/${id}` : raw;
  } catch {
    return raw;
  }
};
---

<Base title="Media — Aled Evans" description={site.metaDescription}>
  <Header />
  <main class="section">
    <div class="container">
      <h1 class="h2 font-serif mb-4">Photo Gallery</h1>

      <!-- Gallery grid with clickable thumbnails (stores index + full src) -->
      <div class="grid grid-cols-2 md:grid-cols-3 gap-3 mb-12">
        {site.media.gallery.map((g, i) => {
          const src = typeof g === 'string' ? g : g.src;
          return (
            <button
              class="group block w-full overflow-hidden rounded-md ring-1 ring-coal/10 focus:outline-none focus:ring-2 focus:ring-primary"
              data-full={src}
              data-index={i}
              aria-label="Open image"
            >
              <img
                src={src}
                alt="Gallery image"
                class="w-full aspect-[3/2] object-cover object-center transition-transform duration-300 group-hover:scale-[1.02]"
              />
            </button>
          );
        })}
      </div>

      <h2 class="h2 font-serif mb-4">Videos</h2>
      <div class="grid md:grid-cols-2 gap-6">
        {site.media.videos.map((v) => {
          const src = toEmbed(v.url);
          return (
            <div class="w-full rounded-md ring-1 ring-coal/10 overflow-hidden" style="aspect-ratio: 16 / 9;">
              <iframe
                class="w-full h-full"
                src={src}
                title={v.title}
                loading="lazy"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                allowfullscreen
                referrerpolicy="strict-origin-when-cross-origin"
              ></iframe>
              <div class="small p-2">{v.title}</div>
            </div>
          );
        })}
      </div>
    </div>
  </main>

  <!-- Lightbox modal with Prev/Next controls -->
  <div
    id="lightbox"
    class="fixed inset-0 z-50 hidden items-center justify-center bg-black/90 p-4"
    aria-hidden="true"
  >
    <button
      id="lb-close"
      class="absolute right-4 top-4 text-white/90 text-3xl leading-none hover:text-white"
      aria-label="Close"
    >
      &times;
    </button>

    <!-- Prev / Next -->
    <button
      id="lb-prev"
      class="absolute left-3 md:left-4 top-1/2 -translate-y-1/2 text-white/90 hover:text-white text-3xl md:text-4xl px-3 py-2"
      aria-label="Previous image"
    >
      ‹
    </button>
    <button
      id="lb-next"
      class="absolute right-3 md:right-4 top-1/2 -translate-y-1/2 text-white/90 hover:text-white text-3xl md:text-4xl px-3 py-2"
      aria-label="Next image"
    >
      ›
    </button>

    <!-- Image + caption -->
    <div class="flex items-center justify-center">
      <img
        id="lb-img"
        src=""
        alt="Full-size image"
        class="max-h-[90vh] max-w-[90vw] object-contain rounded-md shadow-2xl"
      />
    </div>
    <div id="lb-caption" class="absolute bottom-4 left-1/2 -translate-x-1/2 text-white/80 text-sm"></div>
  </div>

  <Footer />

  <script>
    const modal = document.getElementById('lightbox');
    const modalImg = document.getElementById('lb-img');
    const caption = document.getElementById('lb-caption');
    const closeBtn = document.getElementById('lb-close');
    const prevBtn = document.getElementById('lb-prev');
    const nextBtn = document.getElementById('lb-next');

    const thumbs = Array.from(document.querySelectorAll('[data-full]'));
    const sources = thumbs.map(btn => btn.getAttribute('data-full'));
    let current = 0;

    function show(index) {
      if (!sources.length) return;
      current = (index + sources.length) % sources.length; // wrap
      modalImg.src = sources[current];
      caption.textContent = (current + 1) + ' / ' + sources.length;
    }

    function openLightbox(index) {
      show(index);
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.classList.add('overflow-hidden');
      nextBtn.focus();
    }

    function closeLightbox() {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      modalImg.src = '';
      document.body.classList.remove('overflow-hidden');
    }

    // Thumbnail clicks
    thumbs.forEach(btn => {
      btn.addEventListener('click', () => {
        const i = Number(btn.getAttribute('data-index')) || 0;
        openLightbox(i);
      });
    });

    // Controls
    prevBtn.addEventListener('click', () => show(current - 1));
    nextBtn.addEventListener('click', () => show(current + 1));
    closeBtn.addEventListener('click', closeLightbox);

    // Close when clicking backdrop (but not the image or controls)
    modal.addEventListener('click', (e) => {
      if (e.target === modal) closeLightbox();
    });

    // Keyboard: Esc / ← →
    document.addEventListener('keydown', (e) => {
      if (modal.classList.contains('hidden')) return;
      if (e.key === 'Escape') closeLightbox();
      if (e.key === 'ArrowLeft') show(current - 1);
      if (e.key === 'ArrowRight') show(current + 1);
    });

    // Basic swipe support
    let startX = 0;
    modal.addEventListener('touchstart', (e) => {
      startX = e.changedTouches[0].clientX;
    }, { passive: true });
    modal.addEventListener('touchend', (e) => {
      const dx = e.changedTouches[0].clientX - startX;
      if (Math.abs(dx) > 40) {
        if (dx > 0) show(current - 1); else show(current + 1);
      }
    }, { passive: true });
  </script>
</Base>
