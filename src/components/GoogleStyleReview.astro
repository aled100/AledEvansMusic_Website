---
/**
 * ReviewsCarousel.astro
 * Loops through an array of review objects (passed via props.items)
 * Each review should include:
 *  - text
 *  - author
 *  - rating
 *  - date
 * Optional:
 *  - readUrl
 *  - leaveUrl
 */
const { items = [], readUrl, leaveUrl } = Astro.props;
---

<section id="rvw-track" class="relative overflow-hidden max-w-3xl mx-auto">
  <div
    id="rvw-slides"
    class="flex transition-transform duration-500 ease-in-out"
    style={`width: ${items.length * 100}%`}
  >
    {items.map((r) => (
      <div class="w-full flex-shrink-0 px-4">
        <div class="rounded-2xl border border-white/10 bg-[#1A1A1A] p-6 shadow">
          <div class="text-[color:var(--color-gold,#C6A867)] text-2xl mb-2">
            {"★".repeat(r.rating)}{"☆".repeat(5 - r.rating)}
          </div>

          <header class="mb-3 flex items-center gap-3">
            <div class="flex h-10 w-10 items-center justify-center rounded-full bg-green-600 text-white font-semibold">
              {r.author?.charAt(0)}
            </div>
            <div>
              <div class="font-medium">{r.author}</div>
              <div class="text-xs text-white/60">{r.date}</div>
            </div>
          </header>

          <p class="text-white/90 mb-4 leading-relaxed whitespace-pre-line">{r.text}</p>

          <div class="flex gap-3">
            {readUrl && (
              <a
                href={readUrl}
                target="_blank"
                rel="noopener"
                class="rounded-lg bg-white text-black px-3 py-2 text-sm font-medium hover:bg-gray-200"
              >
                Read on Google
              </a>
            )}
            {leaveUrl && (
              <a
                href={leaveUrl}
                target="_blank"
                rel="noopener"
                class="rounded-lg bg-[color:var(--color-gold,#C6A867)] text-[color:var(--color-coal,#1A1A1A)] px-3 py-2 text-sm font-medium hover:opacity-90"
              >
                Leave a Review
              </a>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Navigation arrows -->
  <button id="rvw-prev" class="absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full w-9 h-9 flex items-center justify-center">
    ‹
  </button>
  <button id="rvw-next" class="absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full w-9 h-9 flex items-center justify-center">
    ›
  </button>

  <!-- Dots -->
  <div class="flex justify-center mt-4 gap-2">
    {items.map((_, i) => (
      <button data-dot={i} class="w-3 h-3 rounded-full bg-white/30 aria-[current=true]:bg-[color:var(--color-gold,#C6A867)]"></button>
    ))}
  </div>
</section>

<!-- Controller script -->
<script is:inline>
  (function () {
    const track = document.getElementById("rvw-track");
    const slides = document.getElementById("rvw-slides");
    const prev = document.getElementById("rvw-prev");
    const next = document.getElementById("rvw-next");
    const dots = Array.from(document.querySelectorAll("[data-dot]"));
    if (!track || !slides || !prev || !next || !dots.length) return;

    const count = dots.length;
    let i = 0;

    // Config
    const AUTOPLAY = true;
    const INTERVAL = 7000;
    const RESUME_AFTER = 8000;

    function go(to) {
      i = (to + count) % count;
      const x = -i * track.clientWidth;
      slides.style.transform = `translate3d(${x}px,0,0)`;
      dots.forEach((d, idx) => d.setAttribute("aria-current", idx === i ? "true" : "false"));
    }

    // Autoplay control
    let intervalId = null;
    let resumeTimer = null;

    function startAutoplay() {
      if (!AUTOPLAY || intervalId) return;
      intervalId = setInterval(() => go(i + 1), INTERVAL);
    }
    function stopAutoplay() {
      if (intervalId) { clearInterval(intervalId); intervalId = null; }
    }
    function userOverride() {
      stopAutoplay();
      if (resumeTimer) clearTimeout(resumeTimer);
      resumeTimer = setTimeout(() => startAutoplay(), RESUME_AFTER);
    }

    // Events
    prev.addEventListener("click", () => { go(i - 1); userOverride(); });
    next.addEventListener("click", () => { go(i + 1); userOverride(); });
    dots.forEach((d, idx) => d.addEventListener("click", () => { go(idx); userOverride(); }));

    track.addEventListener("mouseenter", stopAutoplay);
    track.addEventListener("mouseleave", () => AUTOPLAY && startAutoplay());

    let sx = 0, dx = 0, touching = false;
    track.addEventListener("touchstart", e => { touching = true; sx = e.touches[0].clientX; dx = 0; stopAutoplay(); }, {passive:true});
    track.addEventListener("touchmove", e => { if (touching) dx = e.touches[0].clientX - sx; }, {passive:true});
    track.addEventListener("touchend", () => {
      if (Math.abs(dx) > 40) { dx < 0 ? go(i + 1) : go(i - 1); }
      touching = false; userOverride();
    });

    window.addEventListener("resize", () => go(i));

    const prefersReduce = window.matchMedia("(prefers-reduced-motion: reduce)");
    if (prefersReduce.matches) slides.style.transition = "none";

    go(0);
    startAutoplay();
  })();
</script>